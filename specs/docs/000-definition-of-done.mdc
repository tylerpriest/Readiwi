# Definition of Done Enforcement Rule

Enforces a strict workflow aligned with Readiwi's spec-driven development methodology to ensure features are properly specified, designed, tested, implemented, and documented before considering them done.

<rule>
name: definition_of_done
filters:
  - type: event
    pattern: "user_request|task_start"
  - type: command
    pattern: "implement|develop|fix|add|complete|done"
  - type: event
    pattern: "implementation_complete|task_complete"

actions:
  - type: react
    event: "task_start"
    conditions:
      - pattern: "implement|develop|add|fix"
    priority: critical
    action: |
      # READIWI DEFINITION OF DONE WORKFLOW
      
      Follow this process for all development tasks using Readiwi's spec structure:
      
      **Step 1: 📋 Ensure Spec Foundation Exists**
      - Check for spec files in `specs/` directory:
        a) `specs/requirements.md` - EARS format requirements
        b) `specs/design.md` - Architecture and component specifications
        c) `specs/tasks.md` - Numbered task breakdown with status tracking
        d) `specs/MASTER_SPEC.md` - Complete system specification
      - Verify the specific task exists in `specs/tasks.md` with clear acceptance criteria
      - Review task dependencies and ensure prerequisites are met
      - Verify task references specific requirements from `specs/requirements.md`
      
      **Step 2: 🎯 Identify Current Task**
      - Reference specific task from `specs/tasks.md` file
      - Update task status to in progress with [-] in `specs/tasks.md`
      - Ensure task has not already been completed even if not marked completed
      - Verify task is in the correct implementation phase (Phase 1-4)
      
      **Step 3: ✅ Write Tests First (TDD)**
      - Create comprehensive test coverage for the specific task in `readiwi/src/`
      - Include unit tests, integration tests, and accessibility tests
      - Tests should validate requirements referenced in the task
      - Follow Jest + React Testing Library patterns established in project
      - Ensure tests meet 85% coverage threshold as configured in `readiwi/jest.config.js`
      
      **Step 4: 🏗 Implement Minimal Code**
      - Build only what's needed to pass the tests for this specific task
      - Follow the design patterns outlined in `specs/design.md`
      - Follow plugin architecture from `specs/MASTER_SPEC.md`
      - Implement in `readiwi/src/` following Next.js 14 App Router patterns
      - Use TypeScript strict mode as configured in `readiwi/tsconfig.json`
      - Follow Tailwind CSS + Radix UI patterns established in project
      
      I will NOT proceed beyond Step 4 until Steps 1-3 are complete.

  - type: react
    event: "implementation_complete"
    priority: critical
    action: |
      # COMPLETE READIWI DEFINITION OF DONE
      
      After implementation:
      
      **Step 5: 🚦 PRODUCTION-READY QUALITY GATES ENFORCEMENT**
      
      **🛑 MANDATORY QUALITY GATES - ALL MUST PASS BEFORE PROCEEDING 🛑**
      
      These three gates are NON-NEGOTIABLE for production readiness:
      
      **🔴 Gate 1: TypeScript Compilation Gate**
      - **REQUIREMENT**: ALL TypeScript compilation MUST succeed with ZERO errors
      - **VALIDATION**: Run `cd readiwi && npm run type-check` - must complete successfully
      - **FAILURE ACTION**: STOP immediately and fix all compilation errors before proceeding
      - **RATIONALE**: Compilation errors lead to runtime failures in production
      - TypeScript strict mode must be enabled and passing
      - All type definitions must be complete and accurate
      - No any types allowed (strict mode requirement)
      
      **🟡 Gate 2: Core Test Suite Gate**
      - **REQUIREMENT**: Core test suite MUST maintain >85% pass rate minimum
      - **VALIDATION**: Run `cd readiwi && npm test` - pass rate must be >85%
      - **FAILURE ACTION**: STOP immediately and fix failing tests before proceeding
      - **RATIONALE**: Low test pass rates indicate unstable foundation
      - All critical functionality tests must pass
      - Coverage thresholds must be met (85% branches, functions, lines, statements)
      - No failing tests in core system components (auth, plugin-manager, ui-shell, settings, admin, error-reporter)
      - Integration tests for feature interactions must pass
      
      **🟢 Gate 3: Critical Services Gate**
      - **REQUIREMENT**: ALL critical services MUST have working interfaces
      - **VALIDATION**: Integration tests for critical services must pass
      - **FAILURE ACTION**: STOP immediately and restore working interfaces before proceeding
      - **RATIONALE**: Broken critical services render application unusable
      - Core system APIs must be functional and responsive
      - Authentication, plugin manager, settings, and UI shell must be operational
      - All service interfaces must respond correctly to basic operations
      - Service health checks must pass for all critical components
      - API endpoints must return expected responses for core functionality
      
      **Additional Quality Verification:**
      - Run all tests: `cd readiwi && npm test && npm run test:e2e && npm run test:a11y`
      - Ensure no regressions in existing functionality
      - Verify error handling works as designed
      - Confirm all acceptance criteria are met
      - Run linting: `cd readiwi && npm run lint`
      
      **Step 6: 📚 Update Documentation**
      - Update `specs/tasks.md` with implementation notes and completion status
      - Update `specs/MASTER_SPEC.md` if architecture patterns changed
      - Update `readiwi/README.md` if applicable
      - Add code comments for complex logic in `readiwi/src/`
      - Update API documentation if applicable
      
      **Step 7: 📌 Update Task Status**
      - Mark current task as completed with [x] in `specs/tasks.md`
      - Update `specs/tasks.md` with any implementation notes
      - Verify task requirements are fully satisfied
      
      **Step 8: 🔄 Prepare for Next Task**
      - Commit changes with conventional commit format
      - Identify next task in `specs/tasks.md`
      - Continue on to next task and repeat the process
      - Keep going until all tasks are completed

  - type: reject
    conditions:
      - pattern: "complete|done"
      - missing: "all_steps_completed"
    message: |
      🚫 **READIWI DEFINITION OF DONE NOT MET**
      
      Cannot mark as complete until all steps are verified:
      1. Spec foundation exists (`specs/requirements.md`, `specs/design.md`, `specs/tasks.md`, `specs/MASTER_SPEC.md`)
      2. Current task identified and marked in_progress in `specs/tasks.md`
      3. Tests written first (TDD approach) in `readiwi/src/`
      4. Minimal implementation completed following Next.js 14 + TypeScript strict mode patterns
      5. 🚦 PRODUCTION-READY QUALITY GATES PASSED (ALL THREE MANDATORY):
         - **🔴 TypeScript Compilation Gate**: ALL compilation succeeds (`npm run type-check` - ZERO errors, strict mode enabled)
         - **🟡 Core Test Suite Gate**: >85% pass rate maintained (`npm test` - NO failing core tests, 85% coverage maintained)
         - **🟢 Critical Services Gate**: ALL critical services have working interfaces (health checks pass)
      6. All tests passing (`npm test`, `npm run test:e2e`, `npm run test:a11y`)
      7. Documentation updated (`specs/tasks.md`, `specs/MASTER_SPEC.md`)
      8. Task status updated to completed in `specs/tasks.md`
      9. Changes committed
      
      Please complete missing steps following Readiwi's spec workflow.

  - type: suggest
    message: |
      ### Readiwi Definition of Done Checklist
      
      - [ ] 1. 📋 Spec foundation verified (`specs/requirements.md`, `specs/design.md`, `specs/tasks.md`, `specs/MASTER_SPEC.md`)
      - [ ] 2. 🎯 Current task identified and status set to in progress in `specs/tasks.md`
      - [ ] 3. ✅ Tests written first (TDD approach) in `readiwi/src/`
      - [ ] 4. 🏗 Minimal implementation following Next.js 14 + TypeScript strict mode patterns
      - [ ] 5. 🚦 PRODUCTION-READY QUALITY GATES PASSED (ALL THREE MANDATORY):
        - [ ] 5.1. **🔴 TypeScript Compilation Gate**: ALL compilation succeeds (`npm run type-check` - ZERO errors, strict mode enabled)
        - [ ] 5.2. **🟡 Core Test Suite Gate**: >85% pass rate maintained (`npm test` - NO failing core tests, 85% coverage maintained)
        - [ ] 5.3. **🟢 Critical Services Gate**: ALL critical services have working interfaces (health checks pass)
      - [ ] 6. 🧪 All tests passing (`npm test`, `npm run test:e2e`, `npm run test:a11y`)
      - [ ] 7. 📚 Documentation updated (`specs/tasks.md`, `specs/MASTER_SPEC.md`)
      - [ ] 8. 📌 Tasks status updated to completed in `specs/tasks.md`
      - [ ] 9. 🔄 Changes committed, ready for next task

examples:
  - input: "Implement authentication feature"
    output: "Starting Readiwi DoD: First verify spec exists in specs/ and task is in specs/tasks.md"
  - input: "Mark task as done without tests"
    output: "Reject: Readiwi DoD not met - TDD requires tests before implementation in readiwi/src/"

metadata:
  priority: critical
  version: 2.0
  type: readiwi_workflow
  enforcement: strict
</rule>